/*
 * jws API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GameDetailResponse;
import org.openapitools.client.model.MovePlayerRequest;
import org.openapitools.client.model.PutBombRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HardApi {
    private ApiClient localVarApiClient;

    public HardApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HardApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for gamesGameIdPlayersPlayerIdBombPost
     * @param gameId  (required)
     * @param playerId  (required)
     * @param putBombRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bomb successfully placed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is null, or the player name is null or the game cannot be started (already started, too many players), or not the same as the player </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The game with this ID, or the player does not exist </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The player has already put a bomb in the last X ticks </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesGameIdPlayersPlayerIdBombPostCall(Long gameId, Long playerId, PutBombRequest putBombRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = putBombRequest;

        // create path and map variables
        String localVarPath = "/games/{gameId}/players/{playerId}/bomb"
            .replaceAll("\\{" + "gameId" + "\\}", localVarApiClient.escapeString(gameId.toString()))
            .replaceAll("\\{" + "playerId" + "\\}", localVarApiClient.escapeString(playerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gamesGameIdPlayersPlayerIdBombPostValidateBeforeCall(Long gameId, Long playerId, PutBombRequest putBombRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling gamesGameIdPlayersPlayerIdBombPost(Async)");
        }
        
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling gamesGameIdPlayersPlayerIdBombPost(Async)");
        }
        

        okhttp3.Call localVarCall = gamesGameIdPlayersPlayerIdBombPostCall(gameId, playerId, putBombRequest, _callback);
        return localVarCall;

    }

    /**
     * Put a bomb
     * Put a bomb at the specified coordinates
     * @param gameId  (required)
     * @param playerId  (required)
     * @param putBombRequest  (optional)
     * @return GameDetailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bomb successfully placed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is null, or the player name is null or the game cannot be started (already started, too many players), or not the same as the player </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The game with this ID, or the player does not exist </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The player has already put a bomb in the last X ticks </td><td>  -  </td></tr>
     </table>
     */
    public GameDetailResponse gamesGameIdPlayersPlayerIdBombPost(Long gameId, Long playerId, PutBombRequest putBombRequest) throws ApiException {
        ApiResponse<GameDetailResponse> localVarResp = gamesGameIdPlayersPlayerIdBombPostWithHttpInfo(gameId, playerId, putBombRequest);
        return localVarResp.getData();
    }

    /**
     * Put a bomb
     * Put a bomb at the specified coordinates
     * @param gameId  (required)
     * @param playerId  (required)
     * @param putBombRequest  (optional)
     * @return ApiResponse&lt;GameDetailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bomb successfully placed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is null, or the player name is null or the game cannot be started (already started, too many players), or not the same as the player </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The game with this ID, or the player does not exist </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The player has already put a bomb in the last X ticks </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GameDetailResponse> gamesGameIdPlayersPlayerIdBombPostWithHttpInfo(Long gameId, Long playerId, PutBombRequest putBombRequest) throws ApiException {
        okhttp3.Call localVarCall = gamesGameIdPlayersPlayerIdBombPostValidateBeforeCall(gameId, playerId, putBombRequest, null);
        Type localVarReturnType = new TypeToken<GameDetailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Put a bomb (asynchronously)
     * Put a bomb at the specified coordinates
     * @param gameId  (required)
     * @param playerId  (required)
     * @param putBombRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bomb successfully placed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is null, or the player name is null or the game cannot be started (already started, too many players), or not the same as the player </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The game with this ID, or the player does not exist </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The player has already put a bomb in the last X ticks </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesGameIdPlayersPlayerIdBombPostAsync(Long gameId, Long playerId, PutBombRequest putBombRequest, final ApiCallback<GameDetailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gamesGameIdPlayersPlayerIdBombPostValidateBeforeCall(gameId, playerId, putBombRequest, _callback);
        Type localVarReturnType = new TypeToken<GameDetailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gamesGameIdPlayersPlayerIdMovePost
     * @param gameId  (required)
     * @param playerId  (required)
     * @param movePlayerRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Player successfully moved </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The game is not running or the player is already dead. Or, the player cannot move to the specified position </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The game with this ID, or the player does not exist </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The player has already moved in the last X ticks </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesGameIdPlayersPlayerIdMovePostCall(Long gameId, Long playerId, MovePlayerRequest movePlayerRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = movePlayerRequest;

        // create path and map variables
        String localVarPath = "/games/{gameId}/players/{playerId}/move"
            .replaceAll("\\{" + "gameId" + "\\}", localVarApiClient.escapeString(gameId.toString()))
            .replaceAll("\\{" + "playerId" + "\\}", localVarApiClient.escapeString(playerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gamesGameIdPlayersPlayerIdMovePostValidateBeforeCall(Long gameId, Long playerId, MovePlayerRequest movePlayerRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling gamesGameIdPlayersPlayerIdMovePost(Async)");
        }
        
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling gamesGameIdPlayersPlayerIdMovePost(Async)");
        }
        

        okhttp3.Call localVarCall = gamesGameIdPlayersPlayerIdMovePostCall(gameId, playerId, movePlayerRequest, _callback);
        return localVarCall;

    }

    /**
     * Move a player
     * Move a player
     * @param gameId  (required)
     * @param playerId  (required)
     * @param movePlayerRequest  (optional)
     * @return GameDetailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Player successfully moved </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The game is not running or the player is already dead. Or, the player cannot move to the specified position </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The game with this ID, or the player does not exist </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The player has already moved in the last X ticks </td><td>  -  </td></tr>
     </table>
     */
    public GameDetailResponse gamesGameIdPlayersPlayerIdMovePost(Long gameId, Long playerId, MovePlayerRequest movePlayerRequest) throws ApiException {
        ApiResponse<GameDetailResponse> localVarResp = gamesGameIdPlayersPlayerIdMovePostWithHttpInfo(gameId, playerId, movePlayerRequest);
        return localVarResp.getData();
    }

    /**
     * Move a player
     * Move a player
     * @param gameId  (required)
     * @param playerId  (required)
     * @param movePlayerRequest  (optional)
     * @return ApiResponse&lt;GameDetailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Player successfully moved </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The game is not running or the player is already dead. Or, the player cannot move to the specified position </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The game with this ID, or the player does not exist </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The player has already moved in the last X ticks </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GameDetailResponse> gamesGameIdPlayersPlayerIdMovePostWithHttpInfo(Long gameId, Long playerId, MovePlayerRequest movePlayerRequest) throws ApiException {
        okhttp3.Call localVarCall = gamesGameIdPlayersPlayerIdMovePostValidateBeforeCall(gameId, playerId, movePlayerRequest, null);
        Type localVarReturnType = new TypeToken<GameDetailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Move a player (asynchronously)
     * Move a player
     * @param gameId  (required)
     * @param playerId  (required)
     * @param movePlayerRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Player successfully moved </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The game is not running or the player is already dead. Or, the player cannot move to the specified position </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The game with this ID, or the player does not exist </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The player has already moved in the last X ticks </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesGameIdPlayersPlayerIdMovePostAsync(Long gameId, Long playerId, MovePlayerRequest movePlayerRequest, final ApiCallback<GameDetailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gamesGameIdPlayersPlayerIdMovePostValidateBeforeCall(gameId, playerId, movePlayerRequest, _callback);
        Type localVarReturnType = new TypeToken<GameDetailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
