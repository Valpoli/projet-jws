/*
 * jws API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateGameRequest;
import org.openapitools.client.model.GameDetailResponse;
import org.openapitools.client.model.GameListResponse;
import org.openapitools.client.model.JoinGameRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BasicsApi {
    private ApiClient localVarApiClient;

    public BasicsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BasicsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for gamesGameIdGet
     * @param gameId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Game info </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot found game with this id </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesGameIdGetCall(Long gameId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/games/{gameId}"
            .replaceAll("\\{" + "gameId" + "\\}", localVarApiClient.escapeString(gameId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gamesGameIdGetValidateBeforeCall(Long gameId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling gamesGameIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = gamesGameIdGetCall(gameId, _callback);
        return localVarCall;

    }

    /**
     * Get game info
     * Get game info
     * @param gameId  (required)
     * @return GameDetailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Game info </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot found game with this id </td><td>  -  </td></tr>
     </table>
     */
    public GameDetailResponse gamesGameIdGet(Long gameId) throws ApiException {
        ApiResponse<GameDetailResponse> localVarResp = gamesGameIdGetWithHttpInfo(gameId);
        return localVarResp.getData();
    }

    /**
     * Get game info
     * Get game info
     * @param gameId  (required)
     * @return ApiResponse&lt;GameDetailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Game info </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot found game with this id </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GameDetailResponse> gamesGameIdGetWithHttpInfo(Long gameId) throws ApiException {
        okhttp3.Call localVarCall = gamesGameIdGetValidateBeforeCall(gameId, null);
        Type localVarReturnType = new TypeToken<GameDetailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get game info (asynchronously)
     * Get game info
     * @param gameId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Game info </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cannot found game with this id </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesGameIdGetAsync(Long gameId, final ApiCallback<GameDetailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gamesGameIdGetValidateBeforeCall(gameId, _callback);
        Type localVarReturnType = new TypeToken<GameDetailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gamesGameIdPost
     * @param gameId  (required)
     * @param joinGameRequest The name of the player who will join the game (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Game successfully joined </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is null, or the player name is null or the game cannot be started (already started, too many players) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Game with this ID does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesGameIdPostCall(Long gameId, JoinGameRequest joinGameRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = joinGameRequest;

        // create path and map variables
        String localVarPath = "/games/{gameId}"
            .replaceAll("\\{" + "gameId" + "\\}", localVarApiClient.escapeString(gameId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gamesGameIdPostValidateBeforeCall(Long gameId, JoinGameRequest joinGameRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling gamesGameIdPost(Async)");
        }
        

        okhttp3.Call localVarCall = gamesGameIdPostCall(gameId, joinGameRequest, _callback);
        return localVarCall;

    }

    /**
     * Join a game
     * Join a game
     * @param gameId  (required)
     * @param joinGameRequest The name of the player who will join the game (optional)
     * @return GameDetailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Game successfully joined </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is null, or the player name is null or the game cannot be started (already started, too many players) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Game with this ID does not exist </td><td>  -  </td></tr>
     </table>
     */
    public GameDetailResponse gamesGameIdPost(Long gameId, JoinGameRequest joinGameRequest) throws ApiException {
        ApiResponse<GameDetailResponse> localVarResp = gamesGameIdPostWithHttpInfo(gameId, joinGameRequest);
        return localVarResp.getData();
    }

    /**
     * Join a game
     * Join a game
     * @param gameId  (required)
     * @param joinGameRequest The name of the player who will join the game (optional)
     * @return ApiResponse&lt;GameDetailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Game successfully joined </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is null, or the player name is null or the game cannot be started (already started, too many players) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Game with this ID does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GameDetailResponse> gamesGameIdPostWithHttpInfo(Long gameId, JoinGameRequest joinGameRequest) throws ApiException {
        okhttp3.Call localVarCall = gamesGameIdPostValidateBeforeCall(gameId, joinGameRequest, null);
        Type localVarReturnType = new TypeToken<GameDetailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Join a game (asynchronously)
     * Join a game
     * @param gameId  (required)
     * @param joinGameRequest The name of the player who will join the game (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Game successfully joined </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request is null, or the player name is null or the game cannot be started (already started, too many players) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Game with this ID does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesGameIdPostAsync(Long gameId, JoinGameRequest joinGameRequest, final ApiCallback<GameDetailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gamesGameIdPostValidateBeforeCall(gameId, joinGameRequest, _callback);
        Type localVarReturnType = new TypeToken<GameDetailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gamesGameIdStartPatch
     * @param gameId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Game started successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The game with this ID does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesGameIdStartPatchCall(Long gameId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/games/{gameId}/start"
            .replaceAll("\\{" + "gameId" + "\\}", localVarApiClient.escapeString(gameId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gamesGameIdStartPatchValidateBeforeCall(Long gameId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'gameId' is set
        if (gameId == null) {
            throw new ApiException("Missing the required parameter 'gameId' when calling gamesGameIdStartPatch(Async)");
        }
        

        okhttp3.Call localVarCall = gamesGameIdStartPatchCall(gameId, _callback);
        return localVarCall;

    }

    /**
     * Start a game
     * Start a game
     * @param gameId  (required)
     * @return GameDetailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Game started successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The game with this ID does not exist </td><td>  -  </td></tr>
     </table>
     */
    public GameDetailResponse gamesGameIdStartPatch(Long gameId) throws ApiException {
        ApiResponse<GameDetailResponse> localVarResp = gamesGameIdStartPatchWithHttpInfo(gameId);
        return localVarResp.getData();
    }

    /**
     * Start a game
     * Start a game
     * @param gameId  (required)
     * @return ApiResponse&lt;GameDetailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Game started successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The game with this ID does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GameDetailResponse> gamesGameIdStartPatchWithHttpInfo(Long gameId) throws ApiException {
        okhttp3.Call localVarCall = gamesGameIdStartPatchValidateBeforeCall(gameId, null);
        Type localVarReturnType = new TypeToken<GameDetailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start a game (asynchronously)
     * Start a game
     * @param gameId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Game started successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The game with this ID does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesGameIdStartPatchAsync(Long gameId, final ApiCallback<GameDetailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gamesGameIdStartPatchValidateBeforeCall(gameId, _callback);
        Type localVarReturnType = new TypeToken<GameDetailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gamesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/games";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gamesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = gamesGetCall(_callback);
        return localVarCall;

    }

    /**
     * Get all games
     * Get all games
     * @return List&lt;GameListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<GameListResponse> gamesGet() throws ApiException {
        ApiResponse<List<GameListResponse>> localVarResp = gamesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all games
     * Get all games
     * @return ApiResponse&lt;List&lt;GameListResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GameListResponse>> gamesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = gamesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<GameListResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all games (asynchronously)
     * Get all games
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesGetAsync(final ApiCallback<List<GameListResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = gamesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<GameListResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gamesPost
     * @param createGameRequest The name of the first player of the game (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Game created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (request or name is null) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesPostCall(CreateGameRequest createGameRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createGameRequest;

        // create path and map variables
        String localVarPath = "/games";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gamesPostValidateBeforeCall(CreateGameRequest createGameRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = gamesPostCall(createGameRequest, _callback);
        return localVarCall;

    }

    /**
     * Create a new game
     * Create a new game
     * @param createGameRequest The name of the first player of the game (optional)
     * @return GameDetailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Game created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (request or name is null) </td><td>  -  </td></tr>
     </table>
     */
    public GameDetailResponse gamesPost(CreateGameRequest createGameRequest) throws ApiException {
        ApiResponse<GameDetailResponse> localVarResp = gamesPostWithHttpInfo(createGameRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new game
     * Create a new game
     * @param createGameRequest The name of the first player of the game (optional)
     * @return ApiResponse&lt;GameDetailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Game created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (request or name is null) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GameDetailResponse> gamesPostWithHttpInfo(CreateGameRequest createGameRequest) throws ApiException {
        okhttp3.Call localVarCall = gamesPostValidateBeforeCall(createGameRequest, null);
        Type localVarReturnType = new TypeToken<GameDetailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new game (asynchronously)
     * Create a new game
     * @param createGameRequest The name of the first player of the game (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Game created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (request or name is null) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesPostAsync(CreateGameRequest createGameRequest, final ApiCallback<GameDetailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gamesPostValidateBeforeCall(createGameRequest, _callback);
        Type localVarReturnType = new TypeToken<GameDetailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
